package zkar

import (
	"encoding/hex"
	"fmt"
	"github.com/phith0n/litter"
	"io"
	"reflect"
	"regexp"
	"strings"
)

func DumpToGoStruct(ser *Serialization) {
	sq := litter.Options{
		StripPackageNames: false,
		HidePrivateFields: true,
		FieldExclusions:   regexp.MustCompile(`^(XXX_.*)$`), // XXX_ is a prefix of fields generated by protoc-gen-go
		Separator:         " ",
		DumpFunc: customDumpFunction,
		HideZeroValues: true,
	}
	sq.Dump(ser)
}

func customDumpFunction(v reflect.Value, w io.Writer) bool {
	if !v.CanInterface() {
		return false
	}

	if bytearr, ok := v.Interface().([]*TCValue); ok {
		b := strings.Builder{}
		for _, value := range bytearr {
			if value.TypeCode != "B" {
				return false
			}

			b.WriteString("\\x" + hex.EncodeToString([]byte{value.Byte}))
		}

		io.WriteString(w, fmt.Sprintf(`zkar.NewTCValueBytes([]byte("%s"))`, b.String()))
		return true
	}

	if bytearr, ok := v.Interface().([]byte); ok {
		io.WriteString(w, `[]byte("`)
		for _, value := range bytearr {
			io.WriteString(w, fmt.Sprintf("\\x%s", hex.EncodeToString([]byte{value})))
		}
		io.WriteString(w, `")`)
		return true
	}

	return false
}
